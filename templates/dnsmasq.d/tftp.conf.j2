#jinja2: trim_blocks: "true", lstrip_blocks: "true"
# {{ ansible_managed }}
# Configuration file for dnsmasq.
# TFPT configuration

{% if boss__dnsmasq__conf_dhcp -%}
# Enable the TFTP server function.
enable-tftp={% for v in boss__dnsmasq__conf_dhcp if v["tftp"] is defined -%}{{ v["device"] }}{% if not loop.last -%},{% endif %}{% endfor %}

{% for values in boss__dnsmasq__conf_dhcp %}
{% set key=values["device"] %}
{% if values["tftp"] is defined %}
# Look for files to transfer using TFTP relative to the given directory.
tftp-root={{ values["tftp"] }},{{ key }}
{% endif %}
{% endfor %}
{% endif %}


{% if boss__dnsmasq__conf_tftp_secure is defined and boss__dnsmasq__conf_tftp_secure -%}
# Enable TFTP secure mode: without this, any file which is readable by the
# dnsmasq process under normal unix access-control rules is available via TFTP
tftp-secure
{% endif %}

{% if boss__dnsmasq__conf_tftp_lowercase is defined and boss__dnsmasq__conf_tftp_lowercase -%}
# Convert filenames in TFTP requests to all lowercase. This is useful for
# requests from Windows machines
tftp-lowercase
{% endif %}

# Set the maximum number of concurrent TFTP connections allowed
tftp-max={{ boss__dnsmasq__conf_tftp_max | default('50') }}

{% if boss__dnsmasq__conf_tftp_no_blocksize is defined and boss__dnsmasq__conf_tftp_no_blocksize -%}
# Stop the TFTP server from negotiating the "blocksize" option with a client.
tftp-no-blocksize
{% endif %}
