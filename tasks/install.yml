---
# Debian repository
- block:
  - name: Debian - Import repository key
    apt_key: url="{{ boss__dnsmasq__os_repo_key }}" state=present
    when: >
      not boss__dnsmasq__os_repo_key is none
      and boss__dnsmasq__os_repo_key | search("http://.*")
    ignore_errors: yes

  - name: Debian - Add repository package
    apt: name="{{ boss__dnsmasq__os_repo_key }}" state=latest
    when: >
      not boss__dnsmasq__os_repo_key is none and
      not boss__dnsmasq__os_repo_key | search("http://.*")

  - name: Debian - Add repository url
    apt_repository: repo="{{ boss__dnsmasq__os_repo_url }}" state=present

  when: >
    ansible_os_family == 'Debian'
    and not boss__dnsmasq__os_packages
  tags: ["debian", "repository"]


# RedHat repository
- block:
  - name: RedHat - Add repository
    yum: name="{{ boss__dnsmasq__os_repo_url }}" state=present

  - name: RedHat - Import repository key
    rpm_key: key="{{ boss__dnsmasq__os_repo_key }}" state=present
    when: boss__dnsmasq__os_repo_key is not none

  when: >
    ansible_os_family == 'RedHat'
    and not boss__dnsmasq__os_packages
  tags: ["redhat", "repository"]


- name: RedHat - Install required packages
  yum:
    name: "{{ item.key if ('version' not in item.value) else ('%s-%s' % (item.key, item.value['version'])) }}"
    state: "{{ item.value.state | default('present') }}"
    update_cache: "{{ boss__dnsmasq__packages_update_cache | ternary('yes', 'no') }}"
  with_dict: "{{ boss__dnsmasq__packages }}"
  when: ansible_os_family == 'RedHat'
  register: boss__dnsmasq__installed_rh
  tags: ["redhat", "packages"]

- name: Debian - Install required packages
  apt:
    name: "{{ item.key if ('version' not in item.value) else ('%s=%s' % (item.key, item.value['version'])) }}"
    state: "{{ item.value.state | default('present') }}"
    install_recommends: "{{ boss__dnsmasq__packages_install_recommends }}"
    update_cache: "{{ boss__dnsmasq__packages_update_cache | ternary('yes', 'no') }}"
    cache_valid_time: "{{ boss__dnsmasq__packages_update_cache }}"
  with_dict: "{{ boss__dnsmasq__packages }}"
  when: ansible_os_family == 'Debian'
  register: boss__dnsmasq__installed_debian
  tags: ["debian", "packages"]

- name: Check if packages were installed
  set_fact: boss__dnsmasq__reinstalled="{{ boss__dnsmasq__installed_rh.changed or boss__dnsmasq__installed_debian.changed }}"

- name: Ensure dnsmasq is stopped after initial install
  service: name="{{ boss__dnsmasq__daemon }}" state=stopped enabled=no
  ignore_errors: yes
  when: boss__dnsmasq__reinstalled

- name: Get init system
  command: cat /proc/1/comm
  register: boss__dnsmasq__init_system
  changed_when: False

- name: Set init system
  set_fact: boss__dnsmasq__init_system="{{ boss__dnsmasq__init_system.stdout }}"

- block:
  - name: Create custom systemd folder configuration
    file:
      path: "/etc/systemd/system/{{ boss__dnsmasq__daemon }}.service.d"
      state: directory
      mode: 0755

  - name: Define custom systemd properties
    template:
      src: systemd.conf.j2
      dest: "/etc/systemd/system/{{ boss__dnsmasq__daemon }}.service.d/service.conf"
      mode: 0644
    register: boss__dnsmasq__systemd

  - name: Delete upstart configuration
    file: path="/etc/init/{{ boss__dnsmasq__daemon }}.conf" state=absent

  - name: Reload systemd
    command: systemctl daemon-reload
    when: boss__dnsmasq__systemd|changed

  when: boss__dnsmasq__init_system == 'systemd'
  tags: ["systemd", "init"]
