#jinja2: trim_blocks: "true", lstrip_blocks: "true"
# {{ ansible_managed }}
# Configuration file for dnsmasq.
# /etc/dnsmasq.conf (0644): server dnsmasq configuration
#
# Format is one option per line, legal options are the same
# as the long options legal on the command line. See
# "/usr/sbin/dnsmasq --help" or "man 8 dnsmasq" for details.

# If you want dnsmasq to change uid and gid to something other
# than the default, edit the following lines.
user={{ boss__dnsmasq__user }}
group={{ boss__dnsmasq__group }}

{% if boss__dnsmasq__pidfile is defined -%}
pid-file={{ boss__dnsmasq__pidfile }}
{% endif %}

# If you want dnsmasq to listen for DHCP and DNS requests only on
# specified interfaces (and the loopback) give the name of the
# interface (eg eth0) here.
# Repeat the line for more than one interface.
{% if boss__dnsmasq__conf_listen is defined -%}
{% for interface in boss__dnsmasq__conf_listen -%}
{% if interface | ipaddr -%}
listen-address={{ interface }}
{% else %}
interface={{ interface }}
{% endif %}
{% endfor %}
{% endif %}

{% if boss__dnsmasq__conf_bind_interfaces is defined -%}
# On systems which support it, dnsmasq binds the wildcard address,
# even when it is listening on only some interfaces. It then discards
# requests that it shouldn't reply to. This has the advantage of
# working even when interfaces come and go and change address. If you
# want dnsmasq to really bind only the interfaces it is listening on,
# uncomment this option. About the only time you may need this is when
# running another nameserver on the same machine.
{% if boss__dnsmasq__conf_bind_interfaces == 'dynamic' -%}
bind-dynamic
{% else %}
bind-interfaces
{% endif %}
{% endif %}

{% if boss__dnsmasq__conf_log is defined -%}
# Set the facility to which dnsmasq will send syslog entries, this defaults to
# DAEMON, and to LOCAL0 when debug mode is in operation. If the facility given
# contains at least one '/' character, it is taken to be a filename, and dnsmasq
# logs to the given file, instead of syslog. If the facility is '-' then dnsmasq
# logs to stderr.
{% if boss__dnsmasq__conf_log is none -%}
log-facility=DAEMON
{% else %}
log-facility={{ boss__dnsmasq__conf_log }}
{% endif %}
{% endif %}

{% if boss__dnsmasq__conf_log_async is defined -%}
# Enable asynchronous logging and optionally set the limit on the number of
# lines which will be queued by dnsmasq when writing to the syslog is slow.
{% if boss__dnsmasq__conf_log_async is none %}
log-async
{% else %}
log-async={{ boss__dnsmasq__conf_log_async }}
{% endif %}
{% endif %}

{% if boss__dnsmasq__conf_log_dns is defined and boss__dnsmasq__conf_log_dns -%}
# For debugging purposes, log each DNS query as it passes through
# dnsmasq.
log-queries
{% endif %}


### DNS

{% if boss__dnsmasq__conf_domain_needed is defined and boss__dnsmasq__conf_domain_needed -%}
# Never forward plain names (without a dot or domain part)
domain-needed
{% endif %}

{% if boss__dnsmasq__conf_dns_loop_detect is defined and boss__dnsmasq__conf_dns_loop_detect -%}
# Enable code to detect DNS forwarding loops; ie the situation where a query
# sent to one of the upstream server eventually returns as a new query to the
# dnsmasq instance.
dns-loop-detect
{% endif %}

{% if boss__dnsmasq__conf_bogus_priv is defined and boss__dnsmasq__conf_bogus_priv -%}
# All reverse lookups for private IP ranges (ie 192.168.x.x, etc) which
# are not found in /etc/hosts or the DHCP leases file are answered with
# "no such domain" rather than being forwarded upstream.
# Never forward addresses in the non-routed address spaces.
bogus-priv
{% endif %}

{% if boss__dnsmasq__conf_no_hosts is defined and boss__dnsmasq__conf_no_hosts -%}
# If you don't want dnsmasq to read /etc/hosts
no-hosts
{% endif %}

{% if boss__dnsmasq__conf_hosts is defined and not boss__dnsmasq__conf_hosts is none -%}
# Additional hosts file. Read the specified file as well as /etc/hosts.
addn-hosts={{ boss__dnsmasq__config_addhosts }}
{% endif %}

{% if boss__dnsmasq__conf_no_poll is defined and boss__dnsmasq__conf_no_poll -%}
# Don't poll /etc/resolv.conf for changes.
no-poll
{% elif boss__dnsmasq__conf_clear_on_reload is defined and boss__dnsmasq__conf_clear_on_reload %}
# If /etc/resolv.conf is re-read or the upstream servers are set via DBus,
# clear the DNS cache.
clear-on-reload
{% endif %}

# Set the dns memory cachesize here.
cache-size={{ boss__dnsmasq__conf_cache_size | default('1024') }}

{% if boss__dnsmasq__conf_negcache is defined -%}
{% if not boss__dnsmasq__conf_negcache is none -%}
# Negative replies from upstream servers normally contain time-to-live
# information in SOA records which dnsmasq uses for caching.
neg-ttl={{ boss__dnsmasq__conf_negcache }}
{% else %}
# Disable negative caching. Negative caching allows dnsmasq to remember
# "no such domain" answers from upstream nameservers and answer identical
# queries without forwarding them again.
no-negcache
{% endif %}
{% endif %}

{% if boss__dnsmasq__conf_strict_order is defined and boss__dnsmasq__conf_strict_order -%}
# This flag forces dnsmasq to try each query with each server strictly in
# the order they appear in /etc/resolv.conf
strict-order
{% endif %}

{% if boss__dnsmasq__conf_all_servers is defined and boss__dnsmasq__conf_all_servers -%}
# This flag forces dnsmasq to send all queries to all available servers.
# The reply from the server which answers first will be returned to the
# original requester.
all-servers
{% endif %}

{% if boss__dnsmasq__conf_resolv is defined and not boss__dnsmasq__conf_resolv is none -%}
# Resolv.conf file to read
resolv-file={{ boss__dnsmasq__conf_resolv }}
{% else %}
# If you don't want dnsmasq to read /etc/resolv.conf or any other
# file, getting its servers from this file instead (see below), then
# uncomment this.
no-resolv
{% endif %}

{% if boss__dnsmasq__conf_mx is defined -%}
{% if boss__dnsmasq__conf_mx == '_self' -%}
# Return an MX record pointing to itself for all local machines.
selfmx
{% elif boss__dnsmasq__conf_mx | trim == '' or boss__dnsmasq__conf_mx == '_local' -%}
# Return an MX record pointing to the mx-target for all local
# machines.
localmx
{% else %}
{% if boss__dnsmasq__conf_mx_domain is defined -%}
# Return an MX record named "maildomain.com" with target
# servermachine.com and preference 50
mx-host={{ boss__dnsmasq__conf_mx_domain }},{{ boss__dnsmasq__conf_mx }},{{ boss__dnsmasq__conf_mx_pref | default('1') }}
{% else %}
# Set the default target for MX records created using the localmx option.
mx-target={{ boss__dnsmasq__conf_mx }}
{% endif %}
{% endif %}
{% endif %}

{% if boss__dnsmasq__conf_servers is defined and boss__dnsmasq__conf_servers is iterable -%}
# Specify IP address of upstream servers directly. Setting this flag does not
# suppress reading of /etc/resolv.conf.
{% for server in boss__dnsmasq__conf_servers -%}
{% if server is string -%}
local={{ server }}
{% else %}
server={{ server | join(',') }}
{% endif %}
{% endfor %}
{% endif %}

{% if boss__dnsmasq__conf_auth_zone is defined and boss__dnsmasq__conf_auth_zone is iterable -%}
{% for domain in boss__dnsmasq__conf_auth_zone %}
auth-zone={{ domain }}
{% endfor %}
{% endif %}

{% if boss__dnsmasq__conf_address is defined and boss__dnsmasq__conf_address is iterable -%}
# Specify an IP address to return for any host in the given domains.
{% for host in boss__dnsmasq__conf_address %}
address={{ host | join(',') }}
{% endfor %}
{% endif %}

{% if boss__dnsmasq__conf_host_records is defined and boss__dnsmasq__conf_host_records is iterable -%}
# Add A, AAAA and PTR records to the DNS. This adds one or more names to the
# DNS with associated IPv4 (A) and IPv6 (AAAA) records
{% for host in boss__dnsmasq__conf_host_records -%}
host-record={{ host | join(',') }}
{% endfor %}
{% endif %}
